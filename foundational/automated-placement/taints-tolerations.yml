# Taints and Tolerations 예제
# 특정 노드를 특별한 워크로드만 사용할 수 있도록 격리

# GPU 워크로드를 위한 Toleration 예제
apiVersion: v1
kind: Pod
metadata:
  name: gpu-workload
  namespace: automated-placement
  labels:
    app: gpu-app
spec:
  tolerations:
  # GPU 노드의 Taint를 허용
  - key: "gpu"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"
  # GPU 노드 전용 Taint 허용
  - key: "workload"
    operator: "Equal"
    value: "gpu-only"
    effect: "NoExecute"
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 2000
  containers:
  - name: ml-training
    image: tensorflow/tensorflow:2.13.0
    resources:
      requests:
        cpu: 1000m
        memory: 2Gi
      limits:
        cpu: 2000m
        memory: 4Gi
        nvidia.com/gpu: 1  # GPU 리소스 요청
---
# Master 노드에 배치 가능한 시스템 컴포넌트
apiVersion: v1
kind: Pod
metadata:
  name: system-component
  namespace: automated-placement
  labels:
    app: system-monitor
spec:
  tolerations:
  # Master 노드의 기본 Taint 허용
  - key: "node-role.kubernetes.io/master"
    operator: "Exists"
    effect: "NoSchedule"
  - key: "node-role.kubernetes.io/control-plane"
    operator: "Exists"
    effect: "NoSchedule"
  # 노드가 준비되지 않은 상태도 허용 (300초 후 evict)
  - key: "node.kubernetes.io/not-ready"
    operator: "Exists"
    effect: "NoExecute"
    tolerationSeconds: 300
  # 노드 연결이 끊어진 상태도 허용 (300초 후 evict)
  - key: "node.kubernetes.io/unreachable"
    operator: "Exists"
    effect: "NoExecute"
    tolerationSeconds: 300
  nodeSelector:
    node-role.kubernetes.io/control-plane: ""
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534  # nobody user
    fsGroup: 65534
  containers:
  - name: monitor
    image: prom/node-exporter:v1.6.1
    ports:
    - containerPort: 9100
    resources:
      requests:
        cpu: 50m
        memory: 64Mi
      limits:
        cpu: 100m
        memory: 128Mi
---
# 특별한 하드웨어가 있는 노드용 워크로드
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: special-hardware-driver
  namespace: automated-placement
spec:
  selector:
    matchLabels:
      app: hardware-driver
  template:
    metadata:
      labels:
        app: hardware-driver
    spec:
      tolerations:
      # 특별한 하드웨어 노드의 Taint 허용
      - key: "hardware"
        operator: "Equal"
        value: "special"
        effect: "NoSchedule"
      # 모든 NoExecute taint 허용 (DaemonSet이므로)
      - operator: "Exists"
        effect: "NoExecute"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: driver
        image: busybox:1.36
        command: ["sh", "-c", "echo 'Hardware driver running' && sleep 3600"]
        resources:
          requests:
            cpu: 10m
            memory: 32Mi
          limits:
            cpu: 50m
            memory: 64Mi
---
# Spot 인스턴스용 워크로드 (언제든 종료될 수 있음)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spot-workload
  namespace: automated-placement
spec:
  replicas: 5
  selector:
    matchLabels:
      app: batch-job
  template:
    metadata:
      labels:
        app: batch-job
        workload-type: batch
    spec:
      tolerations:
      # Spot 인스턴스 Taint 허용
      - key: "instance-type"
        operator: "Equal"
        value: "spot"
        effect: "NoSchedule"
      # Spot 인스턴스가 종료될 때 빠르게 재스케줄링
      - key: "spot-instance-terminating"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 0
      containers:
      - name: batch-processor
        image: k8spatterns/random-generator:1.0
        env:
        - name: ENABLE_GRACEFUL_SHUTDOWN
          value: "true"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 5"]
---
# 유지보수 모드 노드에 대한 Toleration
apiVersion: v1
kind: Pod
metadata:
  name: critical-app
  namespace: automated-placement
  labels:
    app: critical
    priority: high
spec:
  priorityClassName: system-cluster-critical
  tolerations:
  # 유지보수 중인 노드에도 계속 실행
  - key: "maintenance"
    operator: "Exists"
    effect: "NoSchedule"
  # 디스크 압력이 있어도 실행
  - key: "node.kubernetes.io/disk-pressure"
    operator: "Exists"
    effect: "NoSchedule"
  # 메모리 압력이 있어도 실행
  - key: "node.kubernetes.io/memory-pressure"
    operator: "Exists"
    effect: "NoSchedule"
  # PID 압력이 있어도 실행
  - key: "node.kubernetes.io/pid-pressure"
    operator: "Exists"
    effect: "NoSchedule"
  containers:
  - name: critical-service
    image: nginx:alpine
    ports:
    - containerPort: 80
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi
---
# 다양한 Toleration 연산자 예제
apiVersion: v1
kind: Pod
metadata:
  name: flexible-pod
  namespace: automated-placement
  labels:
    app: flexible
spec:
  tolerations:
  # Equal 연산자: key와 value가 정확히 일치해야 함
  - key: "environment"
    operator: "Equal"
    value: "development"
    effect: "NoSchedule"
  # Exists 연산자: key만 있으면 됨 (value 무시)
  - key: "temporary"
    operator: "Exists"
    effect: "NoSchedule"
  # Effect가 없으면 모든 effect에 대해 tolerate
  - key: "experimental"
    operator: "Exists"
  # 모든 taint를 허용 (주의해서 사용)
  # - operator: "Exists"
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
  containers:
  - name: app
    image: busybox:1.36
    command: ["sh", "-c", "echo 'Flexible pod running' && sleep 3600"]
    resources:
      requests:
        cpu: 10m
        memory: 32Mi
      limits:
        cpu: 50m
        memory: 64Mi