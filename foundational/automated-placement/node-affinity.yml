# Node Affinity 예제 - 더 유연한 노드 선택 방법
apiVersion: v1
kind: Pod
metadata:
  name: node-affinity-required
  namespace: automated-placement
  labels:
    app: node-affinity-demo
    placement-strategy: node-affinity
    app-group: automated-placement
spec:
  serviceAccountName: placement-sa
  restartPolicy: Always
  dnsPolicy: ClusterFirst
  dnsConfig:
    options:
    - name: ndots
      value: "2"
    - name: edns0
  affinity:
    nodeAffinity:
      # 필수 조건: 반드시 만족해야 하는 조건
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              # CPU 코어가 2개 이상인 노드
              - key: "beta.kubernetes.io/arch"
                operator: In
                values: ["amd64", "arm64"]
              # 특정 존에 있는 노드
              - key: "topology.kubernetes.io/zone"
                operator: In
                values: ["us-west-1a", "us-west-1b", "us-west-1c"]
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 2000
  containers:
    - name: app
      image: k8spatterns/random-generator:1.0
      ports:
        - containerPort: 8080
      securityContext:
        readOnlyRootFilesystem: false
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 500m
          memory: 512Mi
      livenessProbe:
        httpGet:
          path: /actuator/health
          port: 8080
        initialDelaySeconds: 30
        periodSeconds: 10
      readinessProbe:
        httpGet:
          path: /actuator/health
          port: 8080
        initialDelaySeconds: 5
        periodSeconds: 5
---
# 선호 조건과 필수 조건을 모두 가진 예제
apiVersion: v1
kind: Pod
metadata:
  name: node-affinity-preferred
  namespace: automated-placement
  labels:
    app: node-affinity-preferred-demo
    placement-strategy: node-affinity
    app-group: automated-placement
spec:
  serviceAccountName: placement-sa
  restartPolicy: Always
  dnsPolicy: ClusterFirst
  dnsConfig:
    options:
    - name: ndots
      value: "2"
    - name: edns0
  affinity:
    nodeAffinity:
      # 필수 조건
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: "kubernetes.io/os"
                operator: In
                values: ["linux"]
      # 선호 조건: 가능하면 만족시키려 하지만 필수는 아님
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          preference:
            matchExpressions:
              - key: "disktype"
                operator: In
                values: ["ssd"]
        - weight: 50
          preference:
            matchExpressions:
              - key: "environment"
                operator: In
                values: ["production"]
  securityContext:
    runAsNonRoot: true
    runAsUser: 101
    fsGroup: 101
  containers:
    - name: app
      image: nginx:1.24-alpine
      ports:
        - containerPort: 8080
      securityContext:
        readOnlyRootFilesystem: true
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL
          add:
            - NET_BIND_SERVICE
      resources:
        requests:
          cpu: 50m
          memory: 64Mi
        limits:
          cpu: 200m
          memory: 256Mi
      livenessProbe:
        httpGet:
          path: /
          port: 8080
        initialDelaySeconds: 10
        periodSeconds: 10
      readinessProbe:
        httpGet:
          path: /
          port: 8080
        initialDelaySeconds: 5
        periodSeconds: 5
      volumeMounts:
        - name: cache
          mountPath: /var/cache/nginx
        - name: run
          mountPath: /var/run
  volumes:
    - name: cache
      emptyDir: {}
    - name: run
      emptyDir: {}
---
# 복잡한 Node Affinity 규칙 예제
apiVersion: apps/v1
kind: Deployment
metadata:
  name: complex-node-affinity
  namespace: automated-placement
  labels:
    placement-strategy: node-affinity
    app-group: automated-placement
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: complex-affinity
  template:
    metadata:
      labels:
        app: complex-affinity
        placement-strategy: node-affinity
        app-group: automated-placement
    spec:
      serviceAccountName: placement-sa
      restartPolicy: Always
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              # OR 조건: 아래 중 하나만 만족하면 됨
              - matchExpressions:
                  - key: node-role.kubernetes.io/worker
                    operator: Exists
              - matchExpressions:
                  - key: "kubernetes.io/hostname"
                    operator: NotIn
                    values: ["master-node"]
          preferredDuringSchedulingIgnoredDuringExecution:
            # 가중치가 높은 순서대로 우선 배치
            - weight: 100
              preference:
                matchExpressions:
                  - key: "node.kubernetes.io/instance-type"
                    operator: In
                    values: ["m5.large", "m5.xlarge"]
            - weight: 75
              preference:
                matchExpressions:
                  - key: "failure-domain.beta.kubernetes.io/region"
                    operator: In
                    values: ["us-west-2"]
            - weight: 50
              preference:
                matchExpressions:
                  - key: "disktype"
                    operator: In
                    values: ["ssd", "nvme"]
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
        - name: app
          image: k8spatterns/random-generator:1.0
          ports:
            - containerPort: 8080
          securityContext:
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
